Mumbai Region
--------------------------------------------------------------------------------------------------------------------------
Step1: Create two ec2 for developer 

dev1-system

configure  with following commands

$sudo hostnamectl set-hostname dev1

$sudo su
#yum install git -y
#mkdir /punegit
#cd /punegit
#git init

Create user and email for git operation
#git config --global user.name sara
#git config --global user.email sara@gmail.com

For Verify user details
#git config --list
#cd ..
#git clone https://github.com/hackwithabhi1/hello-world.git
# cp -rvf hello-world/* /punegit/
#cd  /punegit/
#git  add .
#git commit -m 'myawspro' .
#git status
--------------------------------------------------------------------------------------------------------------------------
Step2: create repository in github.com ( awspromarch2024)

Open browser - github.com -create repository - "awspromarch2024"

open terminal on dev system - 
#git branch -M main
#git remote add origin https://github.com/hackwithabhi1/awsjuly2024pro.git
#git push -u origin main

goto github repository and refresh page - verify code is uploaded.
---------------------------------------------------------------------------------------------------------------------
Step3: setup jenkins server ( use AL2023 t3.small )

Login on Jenkins_Server:
1.	Set hostname
$sudo hostnamectl  set-hostname jenkins
$sudo   su
$cd
--------------------------------------------------------------------------------------------------------------------------
Step4.	Install java
#yum update -y

#yum install java-11   -y
#java -version
--------------------------------------------------------------------------------------------------------------------------
Step5:	Create tomcat user and group
#groupadd --system tomcat
#useradd -d /usr/share/tomcat -r -s /bin/false -g tomcat tomcat
--------------------------------------------------------------------------------------------------------------------------
Step6	Install Tomcat 9 on Amazon Linux 2
#wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.63/bin/apache-tomcat-9.0.63.tar.gz
--------------------------------------------------------------------------------------------------------------------------
Step7:.	Use tar command line tool to extract downloaded archive.
#tar -xvzf apache-tomcat-9.0.63.tar.gz -C /usr/share/
--------------------------------------------------------------------------------------------------------------------------
Step8:	Create Symlink to the folder /usr/share/tomcat. This is for easy updates.
#ln -s /usr/share/apache-tomcat-9.0.63/ /usr/share/tomcat
--------------------------------------------------------------------------------------------------------------------------
Step9:	Update folder permissions
#chown -R tomcat:tomcat /usr/share/tomcat
#chown -R tomcat:tomcat /usr/share/apache-tomcat-9.0.63/
--------------------------------------------------------------------------------------------------------------------------
Step10:	Create Tomcat Systemd service

Run following code to create tomcat service in a single command on terminal
-----------------------------------------------------------------------------------
#tee /etc/systemd/system/tomcat.service<<EOF
[Unit]
Description=Tomcat Server
After=syslog.targetnetwork.target

[Service]
Type=forking
User=tomcat
Group=tomcat

Environment=JAVA_HOME=/usr/lib/jvm/jre
Environment='JAVA_OPTS=-Djava.awt.headless=true'
Environment=CATALINA_HOME=/usr/share/tomcat
Environment=CATALINA_BASE=/usr/share/tomcat
Environment=CATALINA_PID=/usr/share/tomcat/temp/tomcat.pid
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M'
ExecStart=/usr/share/tomcat/bin/catalina.sh start
ExecStop=/usr/share/tomcat/bin/catalina.sh stop


[Install]
WantedBy=multi-user.target
EOF
--------------------------------------------------------------------------------------------------------------------------
Step11.	Enable and start tomcat service:

#systemctl daemon-reload
#systemctl start tomcat
#systemctl enable tomcat
#systemctl status tomcat
--------------------------------------------------------------------------------------------------------------------------
Step12:	Configure Tomcat Authentication
We have to edit Tomcat configuration file to enable Admin and Manager UI roles.

#vim /usr/share/tomcat/conf/tomcat-users.xml
Add below lines before closing with </tomcat-users>

<role rolename="admin-gui"/>
<role rolename="manager-gui"/>
<user username="admin" password="111" fullName="Administrator" roles="admin-gui,manager-gui"/>
:wq
#systemctl restart tomcat
--------------------------------------------------------------------------------------------------------------------------
Step13:	Configure Apache web server as a proxy for Tomcat server. First install httpd package.

#yum install httpd  -y
--------------------------------------------------------------------------------------------------------------------------
Step14:	Create VirtualHost file for Tomcat Admin web interface:

#vim /etc/httpd/conf.d/tomcat_manager.conf
<VirtualHost *:80>
ServerAdmin root@localhost
ServerName tomcat.example.com
DefaultType text/html
ProxyRequests off
ProxyPreserveHost On
ProxyPass / http://localhost:8080/
ProxyPassReverse / http://localhost:8080/
</VirtualHost>

<VirtualHost *:80>
ServerName ajp.example.com
ProxyRequests Off
ProxyPass / ajp://localhost:8009/
ProxyPassReverse / ajp://localhost:8009/
</VirtualHost>

:wq
--------------------------------------------------------------------------------------------------------------------------
Step15.	Restart and enable httpd service:

#systemctl start httpd
#systemctl enable httpd
#systemctl status httpd
--------------------------------------------------------------------------------------------------------------------------
Step16:	Open Web Browser and open address
http://192.168.1.111
login tomcat with proper authentication

username: admin	
password: 111
--------------------------------------------------------------------------------------------------------------------------
Step17:	Open terminal and configure jenkins
#cd /usr/share/tomcat/webapps/
#ls
--------------------------------------------------------------------------------------------------------------------------
Step18:	Download jenkins war file
#wget https://get.jenkins.io/war-stable/2.452.3/jenkins.war
--------------------------------------------------------------------------------------------------------------------------
Step19:	Open Web Browser and open address
http://192.168.1.24/jenkins
--------------------------------------------------------------------------------------------------------------------------
Step20:	Login into jenkins

go to linux get default password using following command
#cat /usr/share/tomcat/.jenkins/secrets/initialAdminPassword
Getting Started - Customize Jenkins – Install suggested plugins.
--------------------------------------------------------------------------------------------------------------------------
Step21:	Set jenkins new credentials
username: admin
password: 111

Login in Jenkin Dashboard. 

============================================================================================================
Step22.	Download  Maven 
Following are the set of commands need to be executed sequentially to install maven.
#cd /opt/
#wget  https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz
#tar -xvzf  apache-maven-3.9.8-bin.tar.gz
#rm -rvf  *.gz
#mvn –version
----------------------------------------------------------------------------------------------------------
Step23.	Set path for java and maven
#cd
#vim .bash_profile
JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto.x86_64/
MAVEN_HOME=/opt/apache-maven-3.9.8
M2=/opt/apache-maven-3.9.8/bin/
PATH=$PATH:$JAVA_HOME:$MAVEN_HOME:$M2:$HOME/bin
:wq

#source .bash_profile
#echo $PATH
#mvn  --version
----------------------------------------------------------------------------------------------------------
Step24.	Install git:
#yum install git -y
-----------------------------------------------------------------------------------------------------------
Step25.	Open Jenkins
http://localhost/jenkins
Dashboard – Manage Jenkins – Tools – git – Name (default) – path to git execute (/bin/git)
Maven – add maven – Name (mvn) – MAVEN_HOME(/opt/apache-maven-3.9.8/)– Apply – Save.
-----------------------------------------------------------------------------------------------------------
Step26: Install require plugins
Dashboard – Manage Jenkins – Plugins - Available Plugins - search "Maven Integration" and "Publish Over SSH" - Install - Restart Jenkins.
-----------------------------------------------------------------------------------------------------------
Step27: create project
Open Jenkins
http://192.168.1.24/jenkins

Dashboard – New Item – Enter new item name (aws_pro2024) – freestyle project – ok – source code management – git – repository url ( https://github.com/hackwithabhi1/awsjuly2024pro.git ) - Build Steps (invoke top-level maven targets ) – Maven version (mvn) – Goals ( clean install package ) – Apply – Save.

Dashboard – aws_pro2024 – Build Now – console output.
==========================================================================================
Steps28. Create ansible server: ( AL 2023)   
---------------------------------------------------------------------------------------------------------------------------------------------------------
Login in ansible-server

$sudo hostnamectl set-hostname ansible
$sudo su
#cd

install ansible
#yum install ansible -y
#ansible --version
---------------------------------------------------------------------------------------------------------------------------------------------------------
Step29: Create itadmin user on ansible-server

#useradd   itadmin
#passwd    itadmin
111
111
#vim /etc/sudoers
itadmin  ALL=(ALL)   NOPASSWD: ALL   # ( on line 101)
:wq!
---------------------------------------------------------------------------------------------------------------------------------------------------------
Step30: update ssh config file on ansible
#vim  /etc/ssh/sshd_config
PermitRootLogin yes                                ( line 40 )
PasswordAuthentication yes                 ( line 65 )
:wq
#systemctl  restart  sshd
==========================================================================================
Steps31: Create Docker server: ( AL 2023)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Login in  Docker-Server

$sudo hostnamectl set-hostname docker
$sudo su
#cd
---------------------------------------------------------------------------------------------------------------------------------------------------------
Step32: Create itadmin user on docker-server

#useradd   itadmin
#passwd    itadmin
111
111
#vim /etc/sudoers
itadmin  ALL=(ALL)   NOPASSWD: ALL   # ( on line 101)
:wq!
---------------------------------------------------------------------------------------------------------------------------------------------------------
Step33: update ssh config file on docker server
#vim  /etc/ssh/sshd_config
PermitRootLogin yes                                ( line 40 )
PasswordAuthentication yes                 ( line 65 )
:wq
#systemctl  restart  sshd
---------------------------------------------------------------------------------------------------------------------------------------------------------
Step 34: Login as itadmin in ansible-server and establish ssh key based authentication with Docker_server
#su itadmin

$ssh-keygen

update /etc/hosts file
$sudo vim /etc/hosts
172.31.37.154 node1
:wq

transfer key to docker server
$ssh-copy-id  itadmin@node1
----------------------------------------------------------------------------------------------
Step35: update inventory file
$sudo mkdir /opt/playbook
$sudo  vim  /opt/playbook/inventory
[docker]
node1

:wq
----------------------------------------------------------------------------------------------
Step36: Create ansible.cfg file

$sudo vim /opt/playbook/ansible.cfg
[defaults]
inventory=/opt/playbook/inventory
remote_user=itadmin
host_key_checking=false
[privilege_escalation]
become=true
become_user=root
become_method=sudo
become_ask_pass=false
:wq
----------------------------------------------------------------------------------------------
Step37: create docker directory to store project data and change ownership
$sudo mkdir  /opt/docker
$sudo chown -R itadmin:itadmin /opt/docker
$sudo chown -R itadmin:itadmin /opt/playbook
----------------------------------------------------------------------------------------------
Step38: Check on ansible-server  client (docker server) is reachable through ansible
$cd   /opt/playbook/
$ansible  all  -m  ping
=====================================================================
Step39: create playbook to deploy container on Docker-Server

$vim /opt/playbook/create-docker-container.yml
---
 - name: create docker container
   hosts: all
   ignore_errors: yes
   tasks:
     - name: install docker
       yum:
         name: docker
         state: present
     - name: start and enable docker
       service:
         name: docker
         state: started
         enabled: yes
     - name: add user into group
       command: usermod -aG docker itadmin
     - name: create docker directory for project containtent
       file:
         path: /docker
         state: directory
         owner: itadmin
         group: itadmin
     - name: stop the running container
       shell: docker stop webapp
     - name: remove container
       shell: docker rm -f webapp
     - name: remove container image
       shell: docker rmi -f sevenmentor:latest
     - name: transfer docker file
       copy:
         src: /opt/docker/Dockerfile
         dest: /opt/docker/
     - name: trasfer web appplication
       copy:
         src: /opt/docker/webapp.war
         dest: /opt/docker/
     - name: build docker image
       shell: cd /opt/docker; docker build -t sevenmentor .
     - name: create docker tomcat container
       shell: docker run -dt --name webapp -p 8090:8080 sevenmentor:latest

:wq	
----------------------------------------------------------------------------------------------
Step39: Login Jenkins ( Connect ansible server with jenkins )

Dashboard – manage Jenkins –  system –SSH Servers (add ) – Name (Ansible_Server) Hostname (192.168.1.112) – username (itadmin) – Advanced - use password authentication or use a different key (111) – Test Configuration – Apply - Save.
----------------------------------------------------------------------------------------------
Step40: transfer project code to ansible and execute it on docker-server

Open Dashboad – aws_pro2024 – Configure-
Now click on “Post Build Action” – send build artifacts over SSH – Name (Ansible_Server) – Source files (webapp/target/*.war) – Remove prefix (webapp/target/) – Remote directory (//opt/docker)
Add Server
Name (Ansible_Server) – Source files (Dockerfile) – Remote directory (//opt/docker)
Add Server
Exec command
cd /opt/playbook; ansible-playbook create-docker-container.yml

Save - Apply
----------------------------------------------------------------------------------------------------------------------------
Step41: For Verify Goto docker server
#docker images
#docker  ps
#docker  ps  -a
#ifconfig
-----------------------------------------------------------------------------------------------------------------------------
Step42: Run Project
Go to Jenkins dashboard – run created project (right click and build)

Open web browser –
http://dockerip:8090/webapp
-----------------------------------------------------------------------------------------------------------------------------

